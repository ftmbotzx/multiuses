from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database
from info import Config
import logging

logger = logging.getLogger(__name__)
db = Database()

@Client.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    """Handle /start command"""
    try:
        logger.info(f"Received /start command from user {message.from_user.id}")

        if not db._connected:
            await db.connect()
            
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        
        # Check if user exists
        user = await db.get_user(user_id)
        
        # Handle referral
        referred_by = None
        if len(message.command) > 1:
            try:
                referred_by = int(message.command[1])
                if referred_by == user_id:
                    referred_by = None  # Can't refer themselves
            except ValueError:
                pass
        
        if not user:
            # Create new user
            await db.create_user(user_id, username, first_name, referred_by)
            
            # Send welcome message with referral info
            welcome_text = Config.START_MESSAGE.format(process_cost=Config.PROCESS_COST)
            
            if referred_by:
                welcome_text += f"\n\nüéâ **·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á  ô·¥è…¥·¥ús!**\n è·¥è·¥ú ·¥°·¥á Ä·¥á  Ä·¥áÍú∞·¥á Ä Ä·¥á·¥Ö ·¥Ä…¥·¥Ö …¢·¥è·¥õ {Config.DEFAULT_CREDITS} ·¥Ñ Ä·¥á·¥Ö…™·¥õs!\n è·¥è·¥ú Ä  Ä·¥áÍú∞·¥á Ä Ä·¥á Ä …¢·¥è·¥õ {Config.REFERRAL_BONUS}  ô·¥è…¥·¥ús ·¥Ñ Ä·¥á·¥Ö…™·¥õs!"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ñ Ä·¥á·¥Ö…™·¥õs", callback_data="check_credits")],
                [InlineKeyboardButton("üìä ·¥á·¥Ä Ä…¥ ·¥Ñ Ä·¥á·¥Ö…™·¥õs", callback_data="earn_credits")],
                [InlineKeyboardButton("üéÅ  Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü", callback_data="referral_info")],
                [InlineKeyboardButton("üíé ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", callback_data="premium_info")]
            ])
            
            await message.reply_text(welcome_text, reply_markup=keyboard)
            
            # Log new user
            if Config.LOG_CHANNEL_ID:
                try:
                    log_text = f"üë§ **…¥·¥á·¥° ·¥ús·¥á Ä**\n\n"
                    log_text += f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
                    log_text += f"**…¥·¥Ä·¥ç·¥á:** {first_name}\n"
                    if username:
                        log_text += f"**·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:** @{username}\n"
                    if referred_by:
                        log_text += f"** Ä·¥áÍú∞·¥á Ä Ä·¥á·¥Ö  ô è:** `{referred_by}`"
                    
                    await client.send_message(Config.LOG_CHANNEL_ID, log_text)
                except Exception as e:
                    logger.error(f"Failed to log new user: {e}")
        else:
            # Update existing user activity
            await db.update_user(user_id, {"last_activity": message.date})
            
            # Send welcome back message
            credits = user.get("credits", 0)
            welcome_text = f"""
üé¨ **·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á  ô·¥Ä·¥Ñ·¥ã!**

 è·¥è·¥ú  ú·¥Ä·¥†·¥á **{credits} ·¥Ñ Ä·¥á·¥Ö…™·¥õs**  Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢.

s·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä ·¥†…™·¥Ö·¥á·¥è ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢!
"""
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ñ Ä·¥á·¥Ö…™·¥õs", callback_data="check_credits")],
                [InlineKeyboardButton("üìä ·¥á·¥Ä Ä…¥ ·¥Ñ Ä·¥á·¥Ö…™·¥õs", callback_data="earn_credits")],
                [InlineKeyboardButton("üéÅ  Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü", callback_data="referral_info")],
                [InlineKeyboardButton("üíé ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", callback_data="premium_info")]
            ])
            
            await message.reply_text(welcome_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.reply_text("‚ùå ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.")

@Client.on_message(filters.command("help") & filters.private)
async def help_command(client: Client, message: Message):
    """Handle /help command"""
    help_text = """
ü§ñ ** ú·¥á ü·¥ò - ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös**

**·¥ús·¥á Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:**
‚Ä¢ `/start` - s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ
‚Ä¢ `/help` - s ú·¥è·¥° ·¥õ ú…™s  ú·¥á ü·¥ò
‚Ä¢ `/credits` - ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä ·¥Ñ Ä·¥á·¥Ö…™·¥õs
‚Ä¢ `/earncredits` -  ü·¥á·¥Ä Ä…¥  ú·¥è·¥° ·¥õ·¥è ·¥á·¥Ä Ä…¥ ·¥Ñ Ä·¥á·¥Ö…™·¥õs
‚Ä¢ `/refer` - …¢·¥á·¥õ  è·¥è·¥ú Ä  Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü  ü…™…¥·¥ã
‚Ä¢ `/refstats` - ·¥Ñ ú·¥á·¥Ñ·¥ã  Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü s·¥õ·¥Ä·¥õs
‚Ä¢ `/premium` - ·¥†…™·¥á·¥° ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥s
‚Ä¢ `/myplan` - ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä ·¥ò ü·¥Ä…¥
‚Ä¢ `/redeem <code>` -  Ä·¥á·¥Ö·¥á·¥á·¥ç ·¥Ä …¢…™Íú∞·¥õ ·¥Ñ·¥è·¥Ö·¥á

** ú·¥è·¥° ·¥õ·¥è ·¥ús·¥á:**
1. s·¥á…¥·¥Ö ·¥Ä ·¥†…™·¥Ö·¥á·¥è ·¥õ·¥è ·¥õ ú·¥á  ô·¥è·¥õ
2. ·¥Ñ ú·¥è·¥ès·¥á ·¥Ä ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ ·¥è·¥ò·¥õ…™·¥è…¥
3. ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ ·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á
4. ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  è·¥è·¥ú Ä ·¥ò Ä·¥è·¥Ñ·¥áss·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è

**·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢:**
‚Ä¢ ·¥õ Ä…™·¥ç ·¥†…™·¥Ö·¥á·¥è ‚Ä¢ ·¥Ñ·¥è·¥ç·¥ò Ä·¥áss ·¥†…™·¥Ö·¥á·¥è
‚Ä¢  Ä·¥è·¥õ·¥Ä·¥õ·¥á ·¥†…™·¥Ö·¥á·¥è ‚Ä¢ ·¥ç·¥á Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥ès
‚Ä¢ ·¥Ä·¥Ö·¥Ö ·¥°·¥Ä·¥õ·¥á Ä·¥ç·¥Ä Ä·¥ã ‚Ä¢ ·¥ç·¥ú·¥õ·¥á ·¥†…™·¥Ö·¥á·¥è
‚Ä¢  Ä·¥á·¥ò ü·¥Ä·¥Ñ·¥á ·¥Ä·¥ú·¥Ö…™·¥è ‚Ä¢  Ä·¥á·¥†·¥á Äs·¥á ·¥†…™·¥Ö·¥á·¥è
‚Ä¢ ·¥Ä·¥Ö·¥Ö s·¥ú ô·¥õ…™·¥õ ü·¥ás ‚Ä¢ ·¥Ñ ú·¥Ä…¥…¢·¥á  Ä·¥ás·¥è ü·¥ú·¥õ…™·¥è…¥
‚Ä¢ ·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ ·¥Ä·¥ú·¥Ö…™·¥è ‚Ä¢ ·¥õ·¥Ä·¥ã·¥á s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ

·¥á·¥Ä·¥Ñ ú ·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ñ·¥ès·¥õs **{Config.PROCESS_COST} ·¥Ñ Ä·¥á·¥Ö…™·¥õs**
"""
    
    await message.reply_text(help_text)
