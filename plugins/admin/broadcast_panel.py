from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.db import Database
from info import Config
import logging

logger = logging.getLogger(__name__)
db = Database()

@Client.on_callback_query(filters.regex("^admin_broadcast$"))
async def admin_broadcast_panel(client: Client, callback_query: CallbackQuery):
    """Broadcast panel"""
    try:
        if callback_query.from_user.id not in Config.ADMINS:
            await callback_query.answer("‚ùå ·¥ú…¥·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö", show_alert=True)
            return
            
        text = f"""
üì¢ ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ**

·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs.

**…™…¥s·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥è…¥s:**
‚Ä¢ ·¥õ è·¥ò·¥á `/broadcast <message>` ·¥õ·¥è s·¥á…¥·¥Ö ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs
‚Ä¢ ·¥ús·¥á ·¥ç·¥Ä Ä·¥ã·¥Ö·¥è·¥°…¥ Íú∞·¥è Ä·¥ç·¥Ä·¥õ·¥õ…™…¥…¢
‚Ä¢ ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á s·¥á…¥·¥õ ·¥°…™·¥õ ú  Ä·¥Ä·¥õ·¥á  ü…™·¥ç…™·¥õ…™…¥…¢

‚ö†Ô∏è **·¥°·¥Ä Ä…¥…™…¥…¢:**  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á s·¥á…¥·¥õ ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs!
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìù ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="admin_create_broadcast"),
                InlineKeyboardButton("üìä ·¥ús·¥á Ä ·¥Ñ·¥è·¥ú…¥·¥õ", callback_data="admin_user_count")
            ],
            [
                InlineKeyboardButton("üìà ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥è…¥ ü è", callback_data="admin_broadcast_active"),
                InlineKeyboardButton("üíé ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥è…¥ ü è", callback_data="admin_broadcast_premium")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_main")
            ]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin broadcast panel: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)