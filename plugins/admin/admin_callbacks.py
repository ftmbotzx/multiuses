from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database
from info import Config
from .admin_utils import admin_callback_only
import logging
from datetime import datetime

logger = logging.getLogger(__name__)
db = Database()

# Missing callback handlers for admin panel buttons

@Client.on_callback_query(filters.regex("^admin_create_broadcast$"))
@admin_callback_only
async def admin_create_broadcast_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin create broadcast callback"""
    try:
        text = """
üìù **·¥Ñ Ä·¥á·¥Ä·¥õ·¥á  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è s·¥á…¥·¥Ö ·¥Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/broadcast <message>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/broadcast Hello everyone! New features are coming soon!`

**Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥ás:**
‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õs ·¥ç·¥Ä Ä·¥ã·¥Ö·¥è·¥°…¥ Íú∞·¥è Ä·¥ç·¥Ä·¥õ·¥õ…™…¥…¢
‚Ä¢ ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ  Ä·¥Ä·¥õ·¥á  ü…™·¥ç…™·¥õ…™…¥…¢
‚Ä¢  Ä·¥á·¥Ä ü-·¥õ…™·¥ç·¥á ·¥ò Ä·¥è…¢ Ä·¥áss ·¥õ Ä·¥Ä·¥Ñ·¥ã…™…¥…¢
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_broadcast")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin create broadcast callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_user_count$"))
@admin_callback_only
async def admin_user_count_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin user count callback"""
    try:
        # Get user counts for different categories
        total_users = await db.users.count_documents({})
        active_users = await db.users.count_documents({
            "last_activity": {"$gte": datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)}
        })
        premium_users = await db.users.count_documents({"premium_until": {"$gt": datetime.now()}})
        banned_users = await db.users.count_documents({"banned": True})
        
        text = f"""
üìä **·¥ús·¥á Ä ·¥Ñ·¥è·¥ú…¥·¥õ**

** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥Ä Ä…¢·¥á·¥õs:**
‚Ä¢ **·¥Ä ü ü ·¥ús·¥á Äs:** {total_users}
‚Ä¢ **·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ús·¥á Äs:** {active_users}
‚Ä¢ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs:** {premium_users}
‚Ä¢ ** ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs:** {banned_users}

**…¥·¥è·¥õ·¥á:**  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs ·¥°…™ ü ü …¥·¥è·¥õ  Ä·¥á·¥Ñ·¥á…™·¥†·¥á  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õs.

‚è∞ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_user_count")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_broadcast")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin user count callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_broadcast_active$"))
@admin_callback_only
async def admin_broadcast_active_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin broadcast active users callback"""
    try:
        text = """
üìà ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ús·¥á Äs**

**Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥á …¥·¥è·¥õ  è·¥á·¥õ …™·¥ç·¥ò ü·¥á·¥ç·¥á…¥·¥õ·¥á·¥Ö**

·¥ús·¥á ·¥õ ú·¥á  Ä·¥á…¢·¥ú ü·¥Ä Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö Íú∞·¥è Ä …¥·¥è·¥°:
`/broadcast <message>`

·¥õ ú…™s ·¥°…™ ü ü s·¥á…¥·¥Ö ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs (·¥áx·¥Ñ ü·¥ú·¥Ö…™…¥…¢  ô·¥Ä…¥…¥·¥á·¥Ö).
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_broadcast")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin broadcast active callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_broadcast_premium$"))
@admin_callback_only
async def admin_broadcast_premium_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin broadcast premium users callback"""
    try:
        text = """
üíé ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs**

**Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥á …¥·¥è·¥õ  è·¥á·¥õ …™·¥ç·¥ò ü·¥á·¥ç·¥á…¥·¥õ·¥á·¥Ö**

·¥ús·¥á ·¥õ ú·¥á  Ä·¥á…¢·¥ú ü·¥Ä Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö Íú∞·¥è Ä …¥·¥è·¥°:
`/broadcast <message>`

·¥õ ú…™s ·¥°…™ ü ü s·¥á…¥·¥Ö ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs (…™…¥·¥Ñ ü·¥ú·¥Ö…™…¥…¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç).
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_broadcast")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin broadcast premium callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_add_premium$"))
@admin_callback_only
async def admin_add_premium_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin add premium callback"""
    try:
        text = """
‚ûï **·¥Ä·¥Ö·¥Ö ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/addpremium <user_id> <days>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/addpremium 123456789 30`

** ô·¥á…¥·¥áÍú∞…™·¥õs:**
‚Ä¢ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ö·¥Ä…™ ü è ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s
‚Ä¢ ·¥ò Ä…™·¥è Ä…™·¥õ è ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢
‚Ä¢ ·¥áx·¥Ñ ü·¥ús…™·¥†·¥á Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥ás
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_premium")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin add premium callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_create_code$"))
@admin_callback_only
async def admin_create_code_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin create code callback"""
    try:
        text = """
üé´ **·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ñ·¥è·¥Ö·¥á**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥Ä ·¥Ñ·¥è·¥Ö·¥á:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/createcode <days>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/createcode 30`

**Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥ás:**
‚Ä¢ ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ ·¥Ñ·¥è·¥Ö·¥á …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥
‚Ä¢ ·¥áx·¥ò…™ Ä·¥Ä·¥õ…™·¥è…¥ ·¥õ Ä·¥Ä·¥Ñ·¥ã…™…¥…¢
‚Ä¢ ·¥è…¥·¥á-·¥õ…™·¥ç·¥á ·¥ús·¥á ·¥è…¥ ü è
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_premium")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin create code callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_premium_users$"))
@admin_callback_only
async def admin_premium_users_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin premium users callback"""
    try:
        # Get premium users
        premium_users = await db.users.find({
            "premium_until": {"$gt": datetime.now()}
        }).sort("premium_until", -1).limit(20).to_list(None)
        
        text = "üíé **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs**\n\n"
        
        if premium_users:
            for i, user in enumerate(premium_users, 1):
                user_id = user.get("user_id")
                first_name = user.get("first_name", "Unknown")
                premium_until = user.get("premium_until")
                days_left = (premium_until - datetime.now()).days if premium_until else 0
                
                text += f"`{i}.` **{first_name}**\n"
                text += f"   …™·¥Ö: `{user_id}`\n"
                text += f"   ·¥áx·¥ò…™ Ä·¥ás: {premium_until.strftime('%d/%m/%Y') if premium_until else 'Never'}\n"
                text += f"   ·¥Ö·¥Ä ès  ü·¥áÍú∞·¥õ: {days_left}\n\n"
        else:
            text += "…¥·¥è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs Íú∞·¥è·¥ú…¥·¥Ö."
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_premium_users")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_premium")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin premium users callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_active_codes$"))
@admin_callback_only
async def admin_active_codes_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin active codes callback"""
    try:
        # Get active codes
        active_codes = await db.premium_codes.find({
            "used": False
        }).sort("created_date", -1).limit(20).to_list(None)
        
        text = "üéüÔ∏è **·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ñ·¥è·¥Ö·¥ás**\n\n"
        
        if active_codes:
            for i, code in enumerate(active_codes, 1):
                code_str = code.get("code")
                days = code.get("days", 0)
                created_date = code.get("created_date", datetime.now())
                created_by = code.get("created_by")
                
                text += f"`{i}.` **{code_str}**\n"
                text += f"   ·¥Ö·¥Ä ès: {days}\n"
                text += f"   ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö: {created_date.strftime('%d/%m/%Y')}\n"
                text += f"    ô è: `{created_by}`\n\n"
        else:
            text += "…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ñ·¥è·¥Ö·¥ás Íú∞·¥è·¥ú…¥·¥Ö."
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_active_codes")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_premium")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin active codes callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_expiring_premium$"))
@admin_callback_only
async def admin_expiring_premium_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin expiring premium callback"""
    try:
        from datetime import timedelta
        
        # Get users with premium expiring in next 7 days
        expiring_soon = await db.users.find({
            "premium_until": {
                "$gt": datetime.now(),
                "$lt": datetime.now() + timedelta(days=7)
            }
        }).sort("premium_until", 1).to_list(None)
        
        text = "‚è∞ **·¥áx·¥ò…™ Ä…™…¥…¢ s·¥è·¥è…¥ (…¥·¥áx·¥õ 7 ·¥Ö·¥Ä ès)**\n\n"
        
        if expiring_soon:
            for i, user in enumerate(expiring_soon, 1):
                user_id = user.get("user_id")
                first_name = user.get("first_name", "Unknown")
                premium_until = user.get("premium_until")
                days_left = (premium_until - datetime.now()).days if premium_until else 0
                
                text += f"`{i}.` **{first_name}**\n"
                text += f"   …™·¥Ö: `{user_id}`\n"
                text += f"   ·¥áx·¥ò…™ Ä·¥ás: {premium_until.strftime('%d/%m/%Y')}\n"
                text += f"   ·¥Ö·¥Ä ès  ü·¥áÍú∞·¥õ: {days_left}\n\n"
        else:
            text += "…¥·¥è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥áx·¥ò…™ Ä…™…¥…¢ …™…¥ …¥·¥áx·¥õ 7 ·¥Ö·¥Ä ès."
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_expiring_premium")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_premium")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin expiring premium callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_premium_stats$"))
@admin_callback_only
async def admin_premium_stats_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin premium stats callback"""
    try:
        # Get comprehensive premium stats
        total_premium = await db.users.count_documents({"premium_until": {"$gt": datetime.now()}})
        expired_premium = await db.users.count_documents({
            "premium_until": {"$lt": datetime.now(), "$ne": None}
        })
        
        total_codes = await db.premium_codes.count_documents({})
        used_codes = await db.premium_codes.count_documents({"used": True})
        unused_codes = await db.premium_codes.count_documents({"used": False})
        
        text = f"""
üìä **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs**

**·¥ús·¥á Äs:**
‚Ä¢ **·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç:** {total_premium}
‚Ä¢ **·¥áx·¥ò…™ Ä·¥á·¥Ö ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç:** {expired_premium}

**·¥Ñ·¥è·¥Ö·¥ás:**
‚Ä¢ **·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ·¥è·¥Ö·¥ás:** {total_codes}
‚Ä¢ **·¥ús·¥á·¥Ö ·¥Ñ·¥è·¥Ö·¥ás:** {used_codes}
‚Ä¢ **·¥ú…¥·¥ús·¥á·¥Ö ·¥Ñ·¥è·¥Ö·¥ás:** {unused_codes}

**·¥ò Ä…™·¥Ñ…™…¥…¢:**
‚Ä¢ **·¥ç·¥è…¥·¥õ ú ü è:** {Config.PREMIUM_PRICES['monthly']['credits']} ·¥Ñ Ä·¥á·¥Ö…™·¥õs
‚Ä¢ ** è·¥á·¥Ä Ä ü è:** {Config.PREMIUM_PRICES['yearly']['credits']} ·¥Ñ Ä·¥á·¥Ö…™·¥õs

‚è∞ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_premium_stats")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_premium")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin premium stats callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)