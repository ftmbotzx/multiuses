from pyrogram import Client, filters
from pyrogram.types import Message
from database.db import Database
from info import Config
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)
db = Database()

def admin_only(func):
    """Decorator to restrict commands to admins only"""
    async def wrapper(client: Client, message: Message):
        user_id = message.from_user.id
        if user_id not in Config.ADMINS:
            await message.reply_text("‚ùå  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
            return
        return await func(client, message)
    return wrapper

@Client.on_message(filters.command("addpremium") & filters.private)
@admin_only
async def add_premium_command(client: Client, message: Message):
    """Handle /addpremium command"""
    try:
        if len(message.command) < 3:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/addpremium <user_id> <days>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/addpremium 123456789 30`"
            )
            return
        
        try:
            user_id = int(message.command[1])
            days = int(message.command[2])
        except ValueError:
            await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö ·¥è Ä ·¥Ö·¥Ä ès")
            return
        
        # Check if user exists
        user = await db.get_user(user_id)
        if not user:
            await message.reply_text("‚ùå ·¥ús·¥á Ä …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö")
            return
        
        # Add premium time
        success = await db.add_premium_time(user_id, days)
        
        if success:
            await message.reply_text(
                f"üíé **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ö·¥Ö·¥á·¥Ö**\n\n"
                f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
                f"**…¥·¥Ä·¥ç·¥á:** {user.get('first_name', 'Unknown')}\n"
                f"**·¥Ö·¥Ä ès ·¥Ä·¥Ö·¥Ö·¥á·¥Ö:** {days}"
            )
            
            # Notify user
            try:
                await client.send_message(
                    user_id,
                    f"üéâ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö**\n\n"
                    f"·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s!  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö!\n\n"
                    f"**·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥:** {days} ·¥Ö·¥Ä ès\n"
                    f"**·¥áx·¥ò…™ Ä·¥ás:** {(datetime.now() + timedelta(days=days)).strftime('%d/%m/%Y')}\n\n"
                    f"·¥á…¥·¥ä·¥è è ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢!"
                )
            except Exception as e:
                logger.error(f"Failed to notify user: {e}")
            
            # Log premium addition
            if Config.LOG_CHANNEL_ID:
                try:
                    log_text = f"üíé **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ö·¥Ö·¥á·¥Ö**\n\n"
                    log_text += f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
                    log_text += f"**…¥·¥Ä·¥ç·¥á:** {user.get('first_name', 'Unknown')}\n"
                    log_text += f"**·¥Ö·¥Ä ès:** {days}\n"
                    log_text += f"**·¥Ä·¥Ö·¥Ö·¥á·¥Ö  ô è:** {message.from_user.id}"
                    
                    await client.send_message(Config.LOG_CHANNEL_ID, log_text)
                except Exception as e:
                    logger.error(f"Failed to log premium addition: {e}")
        else:
            await message.reply_text("‚ùå Íú∞·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç")
        
    except Exception as e:
        logger.error(f"Error in addpremium command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç.")