from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.db import Database
from info import Config
from .admin_utils import admin_callback_only
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)
db = Database()

@Client.on_callback_query(filters.regex("^admin_users$"))
@admin_callback_only
async def admin_users_panel(client: Client, callback_query: CallbackQuery):
    """User management panel"""
    try:
            
        # Get user stats
        total_users = await db.users.count_documents({}) if db.users is not None else 0
        banned_users = await db.users.count_documents({"banned": True}) if db.users is not None else 0
        new_users_today = await db.users.count_documents({
            "joined_date": {"$gte": datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)}
        }) if db.users is not None else 0
        
        text = f"""
üë• **·¥ús·¥á Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ**

üìä **s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs:**
‚Ä¢ **·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** {total_users}
‚Ä¢ ** ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs:** {banned_users}
‚Ä¢ **…¥·¥á·¥° ·¥ús·¥á Äs ·¥õ·¥è·¥Ö·¥Ä è:** {new_users_today}

üîß **·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ä·¥Ñ·¥õ…™·¥è…¥s:**
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîç s·¥á·¥Ä Ä·¥Ñ ú ·¥ús·¥á Ä", callback_data="admin_search_user"),
                InlineKeyboardButton("üìã  Ä·¥á·¥Ñ·¥á…¥·¥õ ·¥ús·¥á Äs", callback_data="admin_recent_users")
            ],
            [
                InlineKeyboardButton("üö´  ô·¥Ä…¥ ·¥ús·¥á Ä", callback_data="admin_ban_user"),
                InlineKeyboardButton("‚úÖ ·¥ú…¥ ô·¥Ä…¥ ·¥ús·¥á Ä", callback_data="admin_unban_user")
            ],
            [
                InlineKeyboardButton("üí∞ ·¥Ä·¥Ö·¥Ö ·¥Ñ Ä·¥á·¥Ö…™·¥õs", callback_data="admin_add_credits"),
                InlineKeyboardButton("üìä ·¥ús·¥á Ä s·¥õ·¥Ä·¥õs", callback_data="admin_user_stats")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_main")
            ]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin users panel: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

# Add missing user management callbacks
@Client.on_callback_query(filters.regex("^admin_search_user$"))
@admin_callback_only
async def admin_search_user_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin search user callback"""
    try:
        text = """
üîç **s·¥á·¥Ä Ä·¥Ñ ú ·¥ús·¥á Ä**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è s·¥á·¥Ä Ä·¥Ñ ú Íú∞·¥è Ä ·¥Ä ·¥ús·¥á Ä:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/searchuser <user_id>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/searchuser 123456789`

·¥õ ú…™s ·¥°…™ ü ü s ú·¥è·¥° ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á ·¥ús·¥á Ä …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ …™…¥·¥Ñ ü·¥ú·¥Ö…™…¥…¢:
‚Ä¢ ·¥ús·¥á Ä ·¥Ö·¥á·¥õ·¥Ä…™ üs ·¥Ä…¥·¥Ö s·¥õ·¥Ä·¥õ·¥ús
‚Ä¢ ·¥Ñ Ä·¥á·¥Ö…™·¥õ  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á ·¥Ä…¥·¥Ö ·¥ús·¥Ä…¢·¥á
‚Ä¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä…¥·¥Ö  Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü …™…¥Íú∞·¥è
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin search user callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_recent_users$"))
@admin_callback_only
async def admin_recent_users_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin recent users callback"""
    try:
        # Get recent users (last 24 hours)
        from datetime import datetime, timedelta
        recent_cutoff = datetime.now() - timedelta(days=1)
        
        recent_users = []
        if db.users is not None:
            cursor = db.users.find({
                "joined_date": {"$gte": recent_cutoff}
            }).sort("joined_date", -1).limit(10)
            
            async for user in cursor:
                recent_users.append(user)
        
        text = f"üìã ** Ä·¥á·¥Ñ·¥á…¥·¥õ ·¥ús·¥á Äs ( ü·¥Äs·¥õ 24 ú)**\n\n"
        
        if recent_users:
            for i, user in enumerate(recent_users, 1):
                text += f"{i}. **{user.get('first_name', 'Unknown')}** (`{user.get('user_id')}`)\n"
                text += f"   ·¥ä·¥è…™…¥·¥á·¥Ö: {user.get('joined_date', 'Unknown')}\n"
                text += f"   ·¥Ñ Ä·¥á·¥Ö…™·¥õs: {user.get('credits', 0)}\n\n"
        else:
            text += "…¥·¥è …¥·¥á·¥° ·¥ús·¥á Äs …™…¥ ·¥õ ú·¥á  ü·¥Äs·¥õ 24  ú·¥è·¥ú Äs."
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_recent_users")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin recent users callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_ban_user$"))
@admin_callback_only
async def admin_ban_user_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin ban user callback"""
    try:
        text = """
üö´ ** ô·¥Ä…¥ ·¥ús·¥á Ä**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è  ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/ban <user_id>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/ban 123456789`

‚ö†Ô∏è **·¥°·¥Ä Ä…¥…™…¥…¢:**  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ!
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin ban user callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_unban_user$"))
@admin_callback_only
async def admin_unban_user_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin unban user callback"""
    try:
        text = """
‚úÖ **·¥ú…¥ ô·¥Ä…¥ ·¥ús·¥á Ä**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/unban <user_id>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/unban 123456789`

‚úÖ **…¥·¥è·¥õ·¥á:** ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä…¢·¥Ä…™…¥.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin unban user callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_add_credits$"))
@admin_callback_only
async def admin_add_credits_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin add credits callback"""
    try:
        text = """
üí∞ **·¥Ä·¥Ö·¥Ö ·¥Ñ Ä·¥á·¥Ö…™·¥õs**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ñ Ä·¥á·¥Ö…™·¥õs:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/addcredits <user_id> <amount>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/addcredits 123456789 500`

üí° **…¥·¥è·¥õ·¥á:** ·¥Ñ Ä·¥á·¥Ö…™·¥õs ·¥°…™ ü ü  ô·¥á ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á Ä's ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin add credits callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_user_stats$"))
@admin_callback_only
async def admin_user_stats_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin user stats callback"""
    try:
        # Get comprehensive user statistics
        total_users = await db.users.count_documents({}) if db.users is not None else 0
        
        # Users by status
        premium_users = await db.users.count_documents({"premium_until": {"$gt": datetime.now()}}) if db.users is not None else 0
        banned_users = await db.users.count_documents({"banned": True}) if db.users is not None else 0
        
        # Users by activity
        from datetime import timedelta
        active_today = await db.users.count_documents({
            "last_activity": {"$gte": datetime.now() - timedelta(days=1)}
        }) if db.users is not None else 0
        
        active_week = await db.users.count_documents({
            "last_activity": {"$gte": datetime.now() - timedelta(days=7)}
        }) if db.users is not None else 0
        
        # Credit statistics
        total_credits_pipeline = [
            {"$group": {"_id": None, "total": {"$sum": "$credits"}}}
        ]
        credit_result = await db.users.aggregate(total_credits_pipeline).to_list(1) if db.users is not None else []
        total_credits = credit_result[0]["total"] if credit_result else 0
        
        text = f"""
üìä **·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö ·¥ús·¥á Ä s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs**

**·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** {total_users}

**·¥ús·¥á Ä s·¥õ·¥Ä·¥õ·¥ús:**
‚Ä¢ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç:** {premium_users} ({premium_users/total_users*100:.1f}% ·¥èÍú∞ ·¥õ·¥è·¥õ·¥Ä ü)
‚Ä¢ ** ô·¥Ä…¥…¥·¥á·¥Ö:** {banned_users} ({banned_users/total_users*100:.1f}% ·¥èÍú∞ ·¥õ·¥è·¥õ·¥Ä ü)
‚Ä¢ ** Ä·¥á…¢·¥ú ü·¥Ä Ä:** {total_users - premium_users - banned_users}

**·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ è:**
‚Ä¢ **·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥õ·¥è·¥Ö·¥Ä è:** {active_today}
‚Ä¢ **·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥õ ú…™s ·¥°·¥á·¥á·¥ã:** {active_week}

**·¥á·¥Ñ·¥è…¥·¥è·¥ç è:**
‚Ä¢ **·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ Ä·¥á·¥Ö…™·¥õs …™…¥ s ès·¥õ·¥á·¥ç:** {total_credits:,}
‚Ä¢ **·¥Ä·¥†·¥á Ä·¥Ä…¢·¥á ·¥Ñ Ä·¥á·¥Ö…™·¥õs ·¥ò·¥á Ä ·¥ús·¥á Ä:** {total_credits/total_users:.1f if total_users > 0 else 0}
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_user_stats")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin user stats callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)