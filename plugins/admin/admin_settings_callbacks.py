from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database
from info import Config
from .admin_utils import admin_callback_only
import logging
import os
from datetime import datetime

try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False

logger = logging.getLogger(__name__)
db = Database()

# Missing callback handlers for admin settings panel

@Client.on_callback_query(filters.regex("^admin_credit_settings$"))
@admin_callback_only
async def admin_credit_settings_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin credit settings callback"""
    try:
        text = f"""
üí∞ **·¥Ñ Ä·¥á·¥Ö…™·¥õ s·¥á·¥õ·¥õ…™…¥…¢s**

**·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥Ñ·¥è…¥Íú∞…™…¢·¥ú Ä·¥Ä·¥õ…™·¥è…¥:**
‚Ä¢ **·¥Ö·¥áÍú∞·¥Ä·¥ú ü·¥õ ·¥Ñ Ä·¥á·¥Ö…™·¥õs:** {Config.DEFAULT_CREDITS}
‚Ä¢ **·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ñ·¥ès·¥õ:** {Config.PROCESS_COST}
‚Ä¢ ** Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü  ô·¥è…¥·¥ús:** {Config.REFERRAL_BONUS}
‚Ä¢ **·¥Ö·¥Ä…™ ü è  ü…™·¥ç…™·¥õ:** {Config.DAILY_LIMIT}

**…¥·¥è·¥õ·¥á:** ·¥õ ú·¥ás·¥á s·¥á·¥õ·¥õ…™…¥…¢s ·¥Ä Ä·¥á ·¥Ñ·¥è…¥Íú∞…™…¢·¥ú Ä·¥á·¥Ö ·¥†…™·¥Ä 
·¥á…¥·¥†…™ Ä·¥è…¥·¥ç·¥á…¥·¥õ ·¥†·¥Ä Ä…™·¥Ä ô ü·¥ás ·¥Ä…¥·¥Ö  Ä·¥áQ·¥ú…™ Ä·¥á ·¥Ä  Ä·¥ás·¥õ·¥Ä Ä·¥õ ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á.

**·¥á…¥·¥†…™ Ä·¥è…¥·¥ç·¥á…¥·¥õ ·¥†·¥Ä Ä…™·¥Ä ô ü·¥ás:**
‚Ä¢ DEFAULT_CREDITS={Config.DEFAULT_CREDITS}
‚Ä¢ PROCESS_COST={Config.PROCESS_COST}
‚Ä¢ REFERRAL_BONUS={Config.REFERRAL_BONUS}
‚Ä¢ DAILY_LIMIT={Config.DAILY_LIMIT}
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_settings")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin credit settings callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_system_info$"))
@admin_callback_only
async def admin_system_info_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin system info callback"""
    try:
        # Get Python and Pyrogram versions
        import pyrogram
        import sys
        
        if PSUTIL_AVAILABLE:
            # Get system information
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
                text = f"""
üîß **s ès·¥õ·¥á·¥ç …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥**

**s ès·¥õ·¥á·¥ç  Ä·¥ás·¥è·¥ú Ä·¥Ñ·¥ás:**
‚Ä¢ **·¥Ñ·¥ò·¥ú ·¥ús·¥Ä…¢·¥á:** {cpu_percent}%
‚Ä¢ **·¥ç·¥á·¥ç·¥è Ä è:** {memory.percent}% ({memory.used // 1024**2}MB / {memory.total // 1024**2}MB)
‚Ä¢ **·¥Ö…™s·¥ã:** {disk.percent}% ({disk.used // 1024**3}GB / {disk.total // 1024**3}GB)

**s·¥èÍú∞·¥õ·¥°·¥Ä Ä·¥á:**
‚Ä¢ **·¥ò è·¥õ ú·¥è…¥:** {sys.version.split()[0]}
‚Ä¢ **·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç:** {pyrogram.__version__}
‚Ä¢ **·¥ès:** {os.name}

**·¥Ñ·¥è…¥Íú∞…™…¢·¥ú Ä·¥Ä·¥õ…™·¥è…¥:**
‚Ä¢ **·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös ·¥Ö…™ Ä:** {Config.DOWNLOADS_DIR}
‚Ä¢ **·¥ú·¥ò ü·¥è·¥Ä·¥Ös ·¥Ö…™ Ä:** {Config.UPLOADS_DIR}
‚Ä¢ **·¥õ·¥á·¥ç·¥ò ·¥Ö…™ Ä:** {Config.TEMP_DIR}

‚è∞ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}
‚Ä¢ **·¥õ·¥á·¥ç·¥ò ·¥Ö…™ Ä:** {Config.TEMP_DIR}

‚è∞ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        else:
            text = f"""
üîß **s ès·¥õ·¥á·¥ç …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥**

**s ès·¥õ·¥á·¥ç  Ä·¥ás·¥è·¥ú Ä·¥Ñ·¥ás:**
‚Ä¢ **s·¥õ·¥Ä·¥õ·¥ús:** ·¥òs·¥ú·¥õ…™ ü …¥·¥è·¥° ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ‚úÖ

**s·¥èÍú∞·¥õ·¥°·¥Ä Ä·¥á:**
‚Ä¢ **·¥ò è·¥õ ú·¥è…¥:** {sys.version.split()[0]}
‚Ä¢ **·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç:** {pyrogram.__version__}
‚Ä¢ **·¥ès:** {os.name}

**·¥Ñ·¥è…¥Íú∞…™…¢·¥ú Ä·¥Ä·¥õ…™·¥è…¥:**
‚Ä¢ **·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös ·¥Ö…™ Ä:** {Config.DOWNLOADS_DIR}
‚Ä¢ **·¥ú·¥ò ü·¥è·¥Ä·¥Ös ·¥Ö…™ Ä:** {Config.UPLOADS_DIR}
‚Ä¢ **·¥õ·¥á·¥ç·¥ò ·¥Ö…™ Ä:** {Config.TEMP_DIR}

‚è∞ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}
‚Ä¢ **·¥õ·¥á·¥ç·¥ò ·¥Ö…™ Ä:** {Config.TEMP_DIR}

‚è∞ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_system_info")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_settings")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin system info callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_cleanup$"))
@admin_callback_only
async def admin_cleanup_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin cleanup callback"""
    try:
        import glob
        import shutil
        
        # Count files in directories
        downloads_count = len(glob.glob(f"{Config.DOWNLOADS_DIR}/*"))
        uploads_count = len(glob.glob(f"{Config.UPLOADS_DIR}/*"))
        temp_count = len(glob.glob(f"{Config.TEMP_DIR}/*"))
        
        # Calculate sizes
        def get_dir_size(path):
            try:
                total_size = 0
                for dirpath, dirnames, filenames in os.walk(path):
                    for filename in filenames:
                        file_path = os.path.join(dirpath, filename)
                        if os.path.exists(file_path):
                            total_size += os.path.getsize(file_path)
                return total_size // 1024**2  # MB
            except:
                return 0
        
        downloads_size = get_dir_size(Config.DOWNLOADS_DIR)
        uploads_size = get_dir_size(Config.UPLOADS_DIR)
        temp_size = get_dir_size(Config.TEMP_DIR)
        
        text = f"""
üßπ **Íú∞…™ ü·¥á ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò**

**·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús:**
‚Ä¢ **·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös:** {downloads_count} Íú∞…™ ü·¥ás ({downloads_size}MB)
‚Ä¢ **·¥ú·¥ò ü·¥è·¥Ä·¥Ös:** {uploads_count} Íú∞…™ ü·¥ás ({uploads_size}MB)
‚Ä¢ **·¥õ·¥á·¥ç·¥ò:** {temp_count} Íú∞…™ ü·¥ás ({temp_size}MB)

**·¥õ·¥è·¥õ·¥Ä ü:** {downloads_count + uploads_count + temp_count} Íú∞…™ ü·¥ás ({downloads_size + uploads_size + temp_size}MB)

**…¥·¥è·¥õ·¥á:** ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò  Ä·¥ú…¥s ·¥á·¥†·¥á Ä è 24  ú·¥è·¥ú Äs.
Íú∞…™ ü·¥ás ·¥è ü·¥Ö·¥á Ä ·¥õ ú·¥Ä…¥ 24  ú·¥è·¥ú Äs ·¥Ä Ä·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üóëÔ∏è ·¥Ñ ü·¥á·¥Ä…¥ …¥·¥è·¥°", callback_data="admin_cleanup_now")],
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_cleanup")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_settings")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin cleanup callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_cleanup_now$"))
@admin_callback_only
async def admin_cleanup_now_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin cleanup now callback"""
    try:
        await callback_query.answer("üßπ s·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò...", show_alert=True)
        
        from helpers.downloader import FileCleanup
        
        # Cleanup files
        downloads_cleaned = FileCleanup.cleanup_directory(Config.DOWNLOADS_DIR, max_age_hours=24)
        uploads_cleaned = FileCleanup.cleanup_directory(Config.UPLOADS_DIR, max_age_hours=24)
        temp_cleaned = FileCleanup.cleanup_directory(Config.TEMP_DIR, max_age_hours=1)
        
        total_cleaned = downloads_cleaned + uploads_cleaned + temp_cleaned
        
        text = f"""
üßπ **·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö**

** Ä·¥ás·¥ú ü·¥õs:**
‚Ä¢ **·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös:** {downloads_cleaned} Íú∞…™ ü·¥ás  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö
‚Ä¢ **·¥ú·¥ò ü·¥è·¥Ä·¥Ös:** {uploads_cleaned} Íú∞…™ ü·¥ás  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö
‚Ä¢ **·¥õ·¥á·¥ç·¥ò:** {temp_cleaned} Íú∞…™ ü·¥ás  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö

**·¥õ·¥è·¥õ·¥Ä ü  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö:** {total_cleaned} Íú∞…™ ü·¥ás

‚úÖ **·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü**
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_cleanup")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_settings")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin cleanup now callback: {e}")
        await callback_query.answer("‚ùå ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò Íú∞·¥Ä…™ ü·¥á·¥Ö", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_file_manager$"))
@admin_callback_only
async def admin_file_manager_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin file manager callback"""
    try:
        text = """
üìÅ **Íú∞…™ ü·¥á ·¥ç·¥Ä…¥·¥Ä…¢·¥á Ä**

**·¥Ö…™ Ä·¥á·¥Ñ·¥õ·¥è Ä…™·¥ás:**
‚Ä¢ **·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös:** ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö Íú∞…™ ü·¥ás
‚Ä¢ **·¥ú·¥ò ü·¥è·¥Ä·¥Ös:** ·¥ò Ä·¥è·¥Ñ·¥áss·¥á·¥Ö Íú∞…™ ü·¥ás  Ä·¥á·¥Ä·¥Ö è Íú∞·¥è Ä ·¥ú·¥ò ü·¥è·¥Ä·¥Ö
‚Ä¢ **·¥õ·¥á·¥ç·¥ò:** ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä è ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ Íú∞…™ ü·¥ás

**·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò:**
‚Ä¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös/·¥ú·¥ò ü·¥è·¥Ä·¥Ös: 24  ú·¥è·¥ú Äs
‚Ä¢ ·¥õ·¥á·¥ç·¥ò: …™·¥ç·¥ç·¥á·¥Ö…™·¥Ä·¥õ·¥á ü è ·¥ÄÍú∞·¥õ·¥á Ä ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢

**…¥·¥è·¥õ·¥á:** Íú∞…™ ü·¥á ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ …™s ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ.
·¥ç·¥Ä…¥·¥ú·¥Ä ü …™…¥·¥õ·¥á Ä·¥†·¥á…¥·¥õ…™·¥è…¥ …™s  Ä·¥Ä Ä·¥á ü è …¥·¥á·¥á·¥Ö·¥á·¥Ö.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üßπ ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò", callback_data="admin_cleanup")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_settings")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin file manager callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_restart$"))
@admin_callback_only
async def admin_restart_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin restart callback"""
    try:
        text = """
üîÑ ** ô·¥è·¥õ  Ä·¥ás·¥õ·¥Ä Ä·¥õ**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è  Ä·¥ás·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/restart`

‚ö†Ô∏è **·¥°·¥Ä Ä…¥…™…¥…¢:** ·¥õ ú…™s ·¥°…™ ü ü:
‚Ä¢ s·¥õ·¥è·¥ò ·¥Ä ü ü ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢
‚Ä¢ ·¥Ñ ü·¥á·¥Ä Ä ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä è ·¥Ö·¥Ä·¥õ·¥Ä
‚Ä¢  Ä·¥á ü·¥è·¥Ä·¥Ö ·¥Ä ü ü ·¥ò ü·¥ú…¢…™…¥s
‚Ä¢  Ä·¥ás·¥á·¥õ ·¥Ä ü ü ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s

·¥ús·¥á ·¥è…¥ ü è ·¥° ú·¥á…¥ …¥·¥á·¥Ñ·¥áss·¥Ä Ä è.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_settings")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin restart callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)