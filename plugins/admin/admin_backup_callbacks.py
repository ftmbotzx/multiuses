from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database
from info import Config
from .admin_utils import admin_callback_only
import logging
import json
import os
from datetime import datetime

logger = logging.getLogger(__name__)
db = Database()

# Missing callback handlers for admin backup panel

@Client.on_callback_query(filters.regex("^admin_create_backup$"))
@admin_callback_only
async def admin_create_backup_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin create backup callback"""
    try:
        await callback_query.answer("üîÑ ·¥Ñ Ä·¥á·¥Ä·¥õ…™…¥…¢  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò...", show_alert=True)
        
        # Get all collections data
        users = await db.users.find({}).to_list(None)
        operations = await db.operations.find({}).to_list(None)
        premium_codes = await db.premium_codes.find({}).to_list(None)
        referrals = await db.referrals.find({}).to_list(None)
        
        backup_data = {
            "users": users,
            "operations": operations,
            "premium_codes": premium_codes,
            "referrals": referrals,
            "backup_date": datetime.now().isoformat(),
            "bot_version": "v2.0",
            "total_records": len(users) + len(operations) + len(premium_codes) + len(referrals)
        }
        
        # Convert to JSON
        backup_json = json.dumps(backup_data, default=str, indent=2)
        
        # Save to file
        backup_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        backup_path = os.path.join(Config.TEMP_DIR, backup_filename)
        
        # Ensure temp directory exists
        os.makedirs(Config.TEMP_DIR, exist_ok=True)
        
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(backup_json)
        
        # Get file size
        file_size = os.path.getsize(backup_path)
        file_size_mb = file_size / (1024 * 1024)
        
        text = f"""
üì• ** ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è**

**Íú∞…™ ü·¥á …™…¥Íú∞·¥è:**
‚Ä¢ **…¥·¥Ä·¥ç·¥á:** {backup_filename}
‚Ä¢ **s…™·¥¢·¥á:** {file_size_mb:.2f} MB
‚Ä¢ ** Ä·¥á·¥Ñ·¥è Ä·¥Ös:** {backup_data['total_records']}

**…™…¥·¥Ñ ü·¥ú·¥Ö·¥á·¥Ö ·¥Ö·¥Ä·¥õ·¥Ä:**
‚Ä¢ **·¥ús·¥á Äs:** {len(users)}
‚Ä¢ **·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s:** {len(operations)}
‚Ä¢ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ñ·¥è·¥Ö·¥ás:** {len(premium_codes)}
‚Ä¢ ** Ä·¥áÍú∞·¥á Ä Ä·¥Ä üs:** {len(referrals)}

‚è∞ **·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

**…¥·¥è·¥õ·¥á:**  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò Íú∞…™ ü·¥á …™s s·¥Ä·¥†·¥á·¥Ö ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä…™ ü è.
·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö …™·¥õ s·¥è·¥è…¥ ·¥Äs …™·¥õ ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì• ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö", callback_data=f"download_backup_{backup_filename}")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_backup")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
        # Send backup file
        try:
            await client.send_document(
                chat_id=callback_query.from_user.id,
                document=backup_path,
                caption=f"üíæ **·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò**\n\nüìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\nüìä {backup_data['total_records']}  Ä·¥á·¥Ñ·¥è Ä·¥Ös"
            )
            
            # Clean up the backup file after sending
            os.remove(backup_path)
            
        except Exception as e:
            logger.error(f"Failed to send backup file: {e}")
            await callback_query.answer("‚ùå Íú∞·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è s·¥á…¥·¥Ö  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò Íú∞…™ ü·¥á", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error in admin create backup callback: {e}")
        await callback_query.answer("‚ùå  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò Íú∞·¥Ä…™ ü·¥á·¥Ö", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_backup_info$"))
@admin_callback_only
async def admin_backup_info_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin backup info callback"""
    try:
        # Get database size info
        users_count = await db.users.count_documents({})
        operations_count = await db.operations.count_documents({})
        premium_codes_count = await db.premium_codes.count_documents({})
        referrals_count = await db.referrals.count_documents({})
        
        total_records = users_count + operations_count + premium_codes_count + referrals_count
        
        # Estimate backup size (rough calculation)
        estimated_size_mb = total_records * 0.001  # Rough estimate
        
        text = f"""
üìä ** ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥**

**·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á s…™·¥¢·¥á:**
‚Ä¢ **·¥ús·¥á Äs:** {users_count:,}  Ä·¥á·¥Ñ·¥è Ä·¥Ös
‚Ä¢ **·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s:** {operations_count:,}  Ä·¥á·¥Ñ·¥è Ä·¥Ös
‚Ä¢ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ñ·¥è·¥Ö·¥ás:** {premium_codes_count:,}  Ä·¥á·¥Ñ·¥è Ä·¥Ös
‚Ä¢ ** Ä·¥áÍú∞·¥á Ä Ä·¥Ä üs:** {referrals_count:,}  Ä·¥á·¥Ñ·¥è Ä·¥Ös

**·¥õ·¥è·¥õ·¥Ä ü  Ä·¥á·¥Ñ·¥è Ä·¥Ös:** {total_records:,}
**·¥ás·¥õ…™·¥ç·¥Ä·¥õ·¥á·¥Ö  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò s…™·¥¢·¥á:** ~{estimated_size_mb:.1f} MB

**·¥° ú·¥Ä·¥õ's …™…¥·¥Ñ ü·¥ú·¥Ö·¥á·¥Ö:**
‚Ä¢ ·¥Ä ü ü ·¥ús·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs ·¥Ä…¥·¥Ö s·¥á·¥õ·¥õ…™…¥…¢s
‚Ä¢ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥  ú…™s·¥õ·¥è Ä è
‚Ä¢ ·¥Ä ü ü ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ñ·¥è·¥Ö·¥ás ·¥Ä…¥·¥Ö ·¥õ ú·¥á…™ Ä s·¥õ·¥Ä·¥õ·¥ús
‚Ä¢  Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü  Ä·¥á ü·¥Ä·¥õ…™·¥è…¥s ú…™·¥òs

**…¥·¥è·¥õ …™…¥·¥Ñ ü·¥ú·¥Ö·¥á·¥Ö:**
‚Ä¢ ·¥Ä·¥Ñ·¥õ·¥ú·¥Ä ü ·¥ç·¥á·¥Ö…™·¥Ä Íú∞…™ ü·¥ás
‚Ä¢ ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä è Íú∞…™ ü·¥ás
‚Ä¢ s·¥áss…™·¥è…¥ ·¥Ö·¥Ä·¥õ·¥Ä

‚è∞ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì• ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò", callback_data="admin_create_backup")],
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_backup_info")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_backup")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin backup info callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_auto_backup$"))
@admin_callback_only
async def admin_auto_backup_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin auto backup callback"""
    try:
        text = """
üîÑ **·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò**

**Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥á …¥·¥è·¥õ  è·¥á·¥õ …™·¥ç·¥ò ü·¥á·¥ç·¥á…¥·¥õ·¥á·¥Ö**

·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ  ô·¥Ä·¥Ñ·¥ã·¥ú·¥òs ·¥°·¥è·¥ú ü·¥Ö …™…¥·¥Ñ ü·¥ú·¥Ö·¥á:
‚Ä¢ s·¥Ñ ú·¥á·¥Ö·¥ú ü·¥á·¥Ö ·¥Ö·¥Ä…™ ü è/·¥°·¥á·¥á·¥ã ü è  ô·¥Ä·¥Ñ·¥ã·¥ú·¥òs
‚Ä¢ ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ ·¥Ñ ü·¥è·¥ú·¥Ö s·¥õ·¥è Ä·¥Ä…¢·¥á ·¥ú·¥ò ü·¥è·¥Ä·¥Ö
‚Ä¢  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò  Ä·¥á·¥õ·¥á…¥·¥õ…™·¥è…¥ ·¥ò·¥è ü…™·¥Ñ…™·¥ás
‚Ä¢ …™…¥·¥Ñ Ä·¥á·¥ç·¥á…¥·¥õ·¥Ä ü  ô·¥Ä·¥Ñ·¥ã·¥ú·¥òs

Íú∞·¥è Ä …¥·¥è·¥°, ·¥ús·¥á ·¥ç·¥Ä…¥·¥ú·¥Ä ü  ô·¥Ä·¥Ñ·¥ã·¥ú·¥òs.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì• ·¥ç·¥Ä…¥·¥ú·¥Ä ü  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò", callback_data="admin_create_backup")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_backup")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin auto backup callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_export_users$"))
@admin_callback_only
async def admin_export_users_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin export users callback"""
    try:
        await callback_query.answer("üìä ·¥áx·¥ò·¥è Ä·¥õ…™…¥…¢ ·¥ús·¥á Ä ·¥Ö·¥Ä·¥õ·¥Ä...", show_alert=True)
        
        # Get user data
        users = await db.users.find({}).to_list(None)
        
        # Create simplified user export
        user_export = []
        for user in users:
            user_export.append({
                "user_id": user.get("user_id"),
                "username": user.get("username"),
                "first_name": user.get("first_name"),
                "credits": user.get("credits", 0),
                "premium_until": user.get("premium_until"),
                "banned": user.get("banned", False),
                "joined_date": user.get("joined_date"),
                "total_operations": user.get("total_operations", 0),
                "referred_by": user.get("referred_by")
            })
        
        export_data = {
            "export_type": "users_only",
            "export_date": datetime.now().isoformat(),
            "total_users": len(user_export),
            "users": user_export
        }
        
        # Convert to JSON
        export_json = json.dumps(export_data, default=str, indent=2)
        
        # Save to file
        export_filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        export_path = os.path.join(Config.TEMP_DIR, export_filename)
        
        # Ensure temp directory exists
        os.makedirs(Config.TEMP_DIR, exist_ok=True)
        
        with open(export_path, 'w', encoding='utf-8') as f:
            f.write(export_json)
        
        # Get file size
        file_size = os.path.getsize(export_path)
        file_size_mb = file_size / (1024 * 1024)
        
        text = f"""
üìã **·¥ús·¥á Ä ·¥Ö·¥Ä·¥õ·¥Ä ·¥áx·¥ò·¥è Ä·¥õ·¥á·¥Ö**

**·¥áx·¥ò·¥è Ä·¥õ …™…¥Íú∞·¥è:**
‚Ä¢ **Íú∞…™ ü·¥á:** {export_filename}
‚Ä¢ **s…™·¥¢·¥á:** {file_size_mb:.2f} MB
‚Ä¢ **·¥ús·¥á Äs:** {len(user_export)}

**…™…¥·¥Ñ ü·¥ú·¥Ö·¥á·¥Ö Íú∞…™·¥á ü·¥Ös:**
‚Ä¢ ·¥ús·¥á Ä …™·¥Ö ·¥Ä…¥·¥Ö  ô·¥Äs…™·¥Ñ …™…¥Íú∞·¥è
‚Ä¢ ·¥Ñ Ä·¥á·¥Ö…™·¥õs ·¥Ä…¥·¥Ö ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥õ·¥Ä·¥õ·¥ús
‚Ä¢ ·¥ä·¥è…™…¥ ·¥Ö·¥Ä·¥õ·¥á ·¥Ä…¥·¥Ö ·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ è
‚Ä¢  Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥

‚è∞ **·¥áx·¥ò·¥è Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_backup")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
        # Send export file
        try:
            await client.send_document(
                chat_id=callback_query.from_user.id,
                document=export_path,
                caption=f"üìã **·¥ús·¥á Ä ·¥Ö·¥Ä·¥õ·¥Ä ·¥áx·¥ò·¥è Ä·¥õ**\n\nüìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\nüë• {len(user_export)} ·¥ús·¥á Äs"
            )
            
            # Clean up the export file after sending
            os.remove(export_path)
            
        except Exception as e:
            logger.error(f"Failed to send export file: {e}")
            await callback_query.answer("‚ùå Íú∞·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è s·¥á…¥·¥Ö ·¥áx·¥ò·¥è Ä·¥õ Íú∞…™ ü·¥á", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error in admin export users callback: {e}")
        await callback_query.answer("‚ùå ·¥áx·¥ò·¥è Ä·¥õ Íú∞·¥Ä…™ ü·¥á·¥Ö", show_alert=True)