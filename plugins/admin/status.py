from pyrogram import Client, filters
from pyrogram.types import Message
from database.db import Database
from info import Config
import logging
from datetime import datetime

logger = logging.getLogger(__name__)
db = Database()

def admin_only(func):
    """Decorator to restrict commands to admins only"""
    async def wrapper(client: Client, message: Message):
        user_id = message.from_user.id
        if user_id not in Config.ADMINS:
            await message.reply_text("‚ùå  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
            return
        return await func(client, message)
    return wrapper

@Client.on_message(filters.command("status") & filters.private)
@admin_only
async def bot_status_command(client: Client, message: Message):
    """Handle /status command"""
    try:
        # Get user stats
        stats = await db.get_user_stats()
        
        # Get operations count
        operations_count = await db.operations.count_documents({})
        
        # Get premium codes count
        unused_codes = await db.premium_codes.count_documents({"used": False})
        used_codes = await db.premium_codes.count_documents({"used": True})
        
        status_text = f"""
üìä ** ô·¥è·¥õ s·¥õ·¥Ä·¥õ·¥ús**

**·¥ús·¥á Ä s·¥õ·¥Ä·¥õs:**
‚Ä¢ **·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** {stats['total_users']}
‚Ä¢ **·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ús·¥á Äs:** {stats['active_users']}
‚Ä¢ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs:** {stats['premium_users']}

**·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s:**
‚Ä¢ **·¥õ·¥è·¥õ·¥Ä ü ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s:** {operations_count}

**·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ñ·¥è·¥Ö·¥ás:**
‚Ä¢ **·¥ú…¥·¥ús·¥á·¥Ö ·¥Ñ·¥è·¥Ö·¥ás:** {unused_codes}
‚Ä¢ **·¥ús·¥á·¥Ö ·¥Ñ·¥è·¥Ö·¥ás:** {used_codes}

**s ès·¥õ·¥á·¥ç …™…¥Íú∞·¥è:**
‚Ä¢ **·¥Ö·¥áÍú∞·¥Ä·¥ú ü·¥õ ·¥Ñ Ä·¥á·¥Ö…™·¥õs:** {Config.DEFAULT_CREDITS}
‚Ä¢ **·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ñ·¥ès·¥õ:** {Config.PROCESS_COST}
‚Ä¢ **·¥Ö·¥Ä…™ ü è  ü…™·¥ç…™·¥õ:** {Config.DAILY_LIMIT}
‚Ä¢ ** Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü  ô·¥è…¥·¥ús:** {Config.REFERRAL_BONUS}

**·¥ú·¥ò·¥õ…™·¥ç·¥á:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        await message.reply_text(status_text)
        
    except Exception as e:
        logger.error(f"Error in status command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä Íú∞·¥á·¥õ·¥Ñ ú…™…¥…¢ s·¥õ·¥Ä·¥õ·¥ús.")