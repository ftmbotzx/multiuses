from pyrogram import Client, filters
from pyrogram.types import Message, CallbackQuery
from database.db import Database
from info import Config
from .admin_utils import admin_only, admin_callback_only
import logging

logger = logging.getLogger(__name__)
db = Database()

@Client.on_message(filters.command("searchuser") & filters.private)
@admin_only
async def search_user_command(client: Client, message: Message):
    """Handle /searchuser command"""
    try:
        if len(message.command) < 2:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/searchuser <user_id>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/searchuser 123456789`"
            )
            return
        
        try:
            user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö")
            return
        
        # Search for user
        user = await db.get_user(user_id)
        if not user:
            await message.reply_text("‚ùå ·¥ús·¥á Ä …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö")
            return
        
        # Get user's stats
        is_premium = await db.is_user_premium(user_id)
        is_banned = await db.is_user_banned(user_id)
        referrals = await db.get_referral_stats(user_id)
        
        # Format user info
        text = f"""
üîç **·¥ús·¥á Ä …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥**

** ô·¥Äs…™·¥Ñ …™…¥Íú∞·¥è:**
‚Ä¢ **·¥ús·¥á Ä …™·¥Ö:** `{user_id}`
‚Ä¢ **…¥·¥Ä·¥ç·¥á:** {user.get('first_name', 'Unknown')}
‚Ä¢ **·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:** @{user.get('username', 'None')}
‚Ä¢ **·¥ä·¥è…™…¥·¥á·¥Ö:** {user.get('joined_date', 'Unknown')}

**·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús:**
‚Ä¢ **·¥Ñ Ä·¥á·¥Ö…™·¥õs:** {user.get('credits', 0)}
‚Ä¢ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç:** {'‚úÖ' if is_premium else '‚ùå'}
‚Ä¢ ** ô·¥Ä…¥…¥·¥á·¥Ö:** {'‚úÖ' if is_banned else '‚ùå'}
‚Ä¢ **·¥Ö·¥Ä…™ ü è ·¥ús·¥Ä…¢·¥á:** {user.get('daily_usage', 0)}/{Config.DAILY_LIMIT}

** Ä·¥áÍú∞·¥á Ä Ä·¥Ä üs:**
‚Ä¢ ** Ä·¥áÍú∞·¥á Ä Ä·¥á·¥Ö  ô è:** {user.get('referred_by', 'None')}
‚Ä¢ ** Ä·¥áÍú∞·¥á Ä Ä·¥Ä üs ·¥Ñ·¥è·¥ú…¥·¥õ:** {referrals.get('count', 0)}
‚Ä¢ ** Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü ·¥á·¥Ä Ä…¥…™…¥…¢s:** {referrals.get('earnings', 0)}

**·¥ò Ä·¥á·¥ç…™·¥ú·¥ç …™…¥Íú∞·¥è:**
‚Ä¢ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ú…¥·¥õ…™ ü:** {user.get('premium_until', 'None')}
"""
        
        await message.reply_text(text)
        
    except Exception as e:
        logger.error(f"Error in search user command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä s·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢ ·¥ús·¥á Ä.")

@Client.on_callback_query(filters.regex("^admin_search_user$"))
@admin_callback_only
async def admin_search_user_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin search user callback"""
    try:
        text = """
üîç **s·¥á·¥Ä Ä·¥Ñ ú ·¥ús·¥á Ä**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è s·¥á·¥Ä Ä·¥Ñ ú Íú∞·¥è Ä ·¥Ä ·¥ús·¥á Ä:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/searchuser <user_id>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/searchuser 123456789`

·¥õ ú…™s ·¥°…™ ü ü s ú·¥è·¥° ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥ús·¥á Ä.
"""
        
        from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin search user callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_recent_users$"))
@admin_callback_only
async def admin_recent_users_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin recent users callback"""
    try:
        # Get recent users (last 24 hours)
        from datetime import datetime, timedelta
        yesterday = datetime.now() - timedelta(hours=24)
        
        recent_users = await db.users.find({
            "joined_date": {"$gte": yesterday}
        }).sort("joined_date", -1).limit(20).to_list(None)
        
        text = "üë• ** Ä·¥á·¥Ñ·¥á…¥·¥õ ·¥ús·¥á Äs ( ü·¥Äs·¥õ 24 ú)**\n\n"
        
        if recent_users:
            for i, user in enumerate(recent_users, 1):
                user_id = user.get("user_id")
                first_name = user.get("first_name", "Unknown")
                joined_date = user.get("joined_date", datetime.now())
                
                text += f"`{i}.` **{first_name}**\n"
                text += f"   …™·¥Ö: `{user_id}`\n"
                text += f"   ·¥ä·¥è…™…¥·¥á·¥Ö: {joined_date.strftime('%d/%m %H:%M')}\n\n"
        else:
            text += "…¥·¥è …¥·¥á·¥° ·¥ús·¥á Äs …™…¥ ·¥õ ú·¥á  ü·¥Äs·¥õ 24  ú·¥è·¥ú Äs."
        
        from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin recent users callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_ban_user$"))
@admin_callback_only
async def admin_ban_user_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin ban user callback"""
    try:
        text = """
üö´ ** ô·¥Ä…¥ ·¥ús·¥á Ä**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è  ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/ban <user_id>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/ban 123456789`

‚ö†Ô∏è **·¥°·¥Ä Ä…¥…™…¥…¢:**  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ.
"""
        
        from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin ban user callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_unban_user$"))
@admin_callback_only
async def admin_unban_user_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin unban user callback"""
    try:
        text = """
‚úÖ **·¥ú…¥ ô·¥Ä…¥ ·¥ús·¥á Ä**

·¥ús·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä:

**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/unban <user_id>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/unban 123456789`

·¥õ ú…™s ·¥°…™ ü ü  Ä·¥ás·¥õ·¥è Ä·¥á ·¥õ ú·¥á ·¥ús·¥á Ä's ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ·¥è ·¥õ ú·¥á  ô·¥è·¥õ.
"""
        
        from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin unban user callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_add_credits$"))
@admin_callback_only
async def admin_add_credits_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin add credits callback"""
    try:
        text = """
üí∞ **·¥Ä·¥Ö·¥Ö ·¥Ñ Ä·¥á·¥Ö…™·¥õs**

·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ñ Ä·¥á·¥Ö…™·¥õs ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä, ·¥ús·¥á ·¥õ ú·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ s·¥á·¥Ñ·¥õ…™·¥è…¥.

·¥Ä ü·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥†·¥á ü è, ·¥ús·¥á:
**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:** `/addpremium <user_id> <days>`

·¥õ ú…™s ·¥°…™ ü ü …¢ Ä·¥Ä…¥·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥°…™·¥õ ú ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ñ Ä·¥á·¥Ö…™·¥õs.
"""
        
        from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíé ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ", callback_data="admin_premium")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin add credits callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_user_stats$"))
@admin_callback_only
async def admin_user_stats_callback(client: Client, callback_query: CallbackQuery):
    """Handle admin user stats callback"""
    try:
        # Get comprehensive user stats
        stats = await db.get_user_stats()
        
        text = f"""
üìä **·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö ·¥ús·¥á Ä s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs**

**·¥è·¥†·¥á Ä·¥Ä ü ü:**
‚Ä¢ **·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** {stats.get('total_users', 0)}
‚Ä¢ **·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ús·¥á Äs:** {stats.get('active_users', 0)}
‚Ä¢ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs:** {stats.get('premium_users', 0)}
‚Ä¢ ** ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs:** {stats.get('banned_users', 0)}

**·¥á…¥…¢·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ:**
‚Ä¢ **·¥õ·¥è·¥Ö·¥Ä è's …¥·¥á·¥° ·¥ús·¥á Äs:** {stats.get('new_today', 0)}
‚Ä¢ **·¥õ ú…™s ·¥°·¥á·¥á·¥ã's …¥·¥á·¥°:** {stats.get('new_week', 0)}
‚Ä¢ **·¥õ ú…™s ·¥ç·¥è…¥·¥õ ú's …¥·¥á·¥°:** {stats.get('new_month', 0)}

‚è∞ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ  Ä·¥áÍú∞ Ä·¥ás ú", callback_data="admin_user_stats")],
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_users")]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin user stats callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)