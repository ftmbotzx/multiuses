from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.db import Database
from info import Config
from .admin_utils import admin_callback_only
import logging
from datetime import datetime

logger = logging.getLogger(__name__)
db = Database()

@Client.on_callback_query(filters.regex("^admin_logs$"))
@admin_callback_only
async def admin_logs_panel(client: Client, callback_query: CallbackQuery):
    """Logs panel"""
    try:
            
        # Get recent operations
        recent_ops = await db.operations.find({}).sort("date", -1).limit(10).to_list(None) if db.operations is not None else []
        
        text = "üìã ** Ä·¥á·¥Ñ·¥á…¥·¥õ ·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ è**\n\n"
        
        if recent_ops:
            for i, op in enumerate(recent_ops, 1):
                user_id = op.get("user_id", "Unknown")
                operation_type = op.get("operation_type", "Unknown")
                status = op.get("status", "Unknown")
                date = op.get("date", datetime.now())
                
                status_emoji = "‚úÖ" if status == "completed" else "‚ùå" if status == "failed" else "‚è≥"
                
                text += f"`{i}.` {status_emoji} **{operation_type}** - ·¥ús·¥á Ä: `{user_id}`\n"
                text += f"    üìÖ {date.strftime('%d/%m %H:%M')}\n\n"
        else:
            text += "…¥·¥è  Ä·¥á·¥Ñ·¥á…¥·¥õ ·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ è Íú∞·¥è·¥ú…¥·¥Ö."
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìä Íú∞·¥ú ü ü  ü·¥è…¢s", callback_data="admin_full_logs"),
                InlineKeyboardButton("üîç Íú∞…™ ü·¥õ·¥á Ä", callback_data="admin_filter_logs")
            ],
            [
                InlineKeyboardButton("‚ùå ·¥á Ä Ä·¥è Äs", callback_data="admin_error_logs"),
                InlineKeyboardButton("‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áss", callback_data="admin_success_logs")
            ],
            [
                InlineKeyboardButton("üîÑ  Ä·¥á“ì Ä·¥ás ú", callback_data="admin_logs"),
                InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_main")
            ]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin logs panel: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

# Add missing logs panel callbacks
@Client.on_callback_query(filters.regex("^admin_full_logs$"))
@admin_callback_only
async def admin_full_logs_callback(client: Client, callback_query: CallbackQuery):
    """Handle full logs callback"""
    try:
        # Get more operations
        recent_ops = await db.operations.find({}).sort("date", -1).limit(50).to_list(None) if db.operations is not None else []
        
        text = "üìä **Íú∞·¥ú ü ü ·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ è  ü·¥è…¢s**\n\n"
        
        if recent_ops:
            for i, op in enumerate(recent_ops, 1):
                if i > 20:  # Limit to 20 for message length
                    break
                user_id = op.get("user_id", "Unknown")
                operation_type = op.get("operation_type", "Unknown")
                status = op.get("status", "Unknown")
                date = op.get("date", datetime.now())
                
                status_emoji = "‚úÖ" if status == "completed" else "‚ùå" if status == "failed" else "‚è≥"
                
                text += f"`{i}.` {status_emoji} **{operation_type}** - `{user_id}` - {date.strftime('%d/%m %H:%M')}\n"
        else:
            text += "…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ è Íú∞·¥è·¥ú…¥·¥Ö."
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_logs")]
        ])
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in full logs callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_filter_logs$"))
@admin_callback_only
async def admin_filter_logs_callback(client: Client, callback_query: CallbackQuery):
    """Handle filter logs callback"""
    try:
        text = """
üîç **Íú∞…™ ü·¥õ·¥á Ä  ü·¥è…¢s**

·¥Ñ ú·¥è·¥ès·¥á ·¥Ä Íú∞…™ ü·¥õ·¥á Ä ·¥è·¥ò·¥õ…™·¥è…¥:
"""
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áss", callback_data="admin_success_logs"),
                InlineKeyboardButton("‚ùå ·¥á Ä Ä·¥è Äs", callback_data="admin_error_logs")
            ],
            [
                InlineKeyboardButton("‚è≥ ·¥ò·¥á…¥·¥Ö…™…¥…¢", callback_data="admin_pending_logs"),
                InlineKeyboardButton("üìÖ ·¥õ·¥è·¥Ö·¥Ä è", callback_data="admin_today_logs")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_logs")
            ]
        ])
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in filter logs callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_error_logs$"))
@admin_callback_only
async def admin_error_logs_callback(client: Client, callback_query: CallbackQuery):
    """Handle error logs callback"""
    try:
        # Get failed operations
        error_ops = await db.operations.find({"status": "failed"}).sort("date", -1).limit(20).to_list(None) if db.operations is not None else []
        
        text = "‚ùå **·¥á Ä Ä·¥è Ä  ü·¥è…¢s**\n\n"
        
        if error_ops:
            for i, op in enumerate(error_ops, 1):
                user_id = op.get("user_id", "Unknown")
                operation_type = op.get("operation_type", "Unknown")
                date = op.get("date", datetime.now())
                error_message = op.get("error_message", "Unknown error")
                
                text += f"`{i}.` ‚ùå **{operation_type}** - `{user_id}`\n"
                text += f"    üìÖ {date.strftime('%d/%m %H:%M')}\n"
                text += f"    üí¨ {error_message[:50]}...\n\n"
        else:
            text += "…¥·¥è ·¥á Ä Ä·¥è Ä  ü·¥è…¢s Íú∞·¥è·¥ú…¥·¥Ö."
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_logs")]
        ])
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in error logs callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)

@Client.on_callback_query(filters.regex("^admin_success_logs$"))
@admin_callback_only
async def admin_success_logs_callback(client: Client, callback_query: CallbackQuery):
    """Handle success logs callback"""
    try:
        # Get successful operations
        success_ops = await db.operations.find({"status": "completed"}).sort("date", -1).limit(20).to_list(None) if db.operations is not None else []
        
        text = "‚úÖ **s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s**\n\n"
        
        if success_ops:
            for i, op in enumerate(success_ops, 1):
                user_id = op.get("user_id", "Unknown")
                operation_type = op.get("operation_type", "Unknown")
                date = op.get("date", datetime.now())
                
                text += f"`{i}.` ‚úÖ **{operation_type}** - `{user_id}` - {date.strftime('%d/%m %H:%M')}\n"
        else:
            text += "…¥·¥è s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s Íú∞·¥è·¥ú…¥·¥Ö."
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="admin_logs")]
        ])
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in success logs callback: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä", show_alert=True)