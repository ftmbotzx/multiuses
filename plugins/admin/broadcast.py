from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.db import Database
from info import Config
import logging
import asyncio

logger = logging.getLogger(__name__)
db = Database()

def admin_only(func):
    """Decorator to restrict commands to admins only"""
    async def wrapper(client: Client, message: Message):
        user_id = message.from_user.id
        if user_id not in Config.ADMINS:
            await message.reply_text("‚ùå  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
            return
        return await func(client, message)
    return wrapper

@Client.on_message(filters.command("broadcast") & filters.private)
@admin_only
async def broadcast_command(client: Client, message: Message):
    """Handle /broadcast command"""
    try:
        if len(message.command) < 2:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/broadcast <message>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/broadcast Hello everyone!`"
            )
            return
        
        broadcast_message = message.text.split(None, 1)[1]
        
        # Get confirmation
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ ·¥Ñ·¥è…¥Íú∞…™ Ä·¥ç", callback_data=f"broadcast_confirm_{message.id}")],
            [InlineKeyboardButton("‚ùå ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü", callback_data="broadcast_cancel")]
        ])
        
        await message.reply_text(
            f"üì¢ ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è…¥Íú∞…™ Ä·¥ç·¥Ä·¥õ…™·¥è…¥**\n\n"
            f"**·¥ç·¥áss·¥Ä…¢·¥á:**\n{broadcast_message}\n\n"
            f"·¥Ñ·¥è…¥Íú∞…™ Ä·¥ç ·¥õ·¥è s·¥á…¥·¥Ö ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs.",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in broadcast command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä …™…¥  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")

@Client.on_callback_query(filters.regex(r"^broadcast_confirm_(\d+)$"))
async def broadcast_confirm_callback(client: Client, callback_query: CallbackQuery):
    """Handle broadcast confirmation"""
    try:
        if callback_query.from_user.id not in Config.ADMINS:
            await callback_query.answer("‚ùå ·¥ú…¥·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö", show_alert=True)
            return
        
        message_id = int(callback_query.matches[0].group(1))
        
        # Get original message
        original_message = await client.get_messages(callback_query.message.chat.id, message_id)
        broadcast_message = original_message.text.split(None, 1)[1]
        
        # Start broadcast
        await callback_query.edit_message_text(
            "üì¢ ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö**\n\n"
            "s·¥á…¥·¥Ö…™…¥…¢ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs..."
        )
        
        # Get all users
        users = await db.users.find({}).to_list(None)
        
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                await client.send_message(
                    user["user_id"],
                    f"üì¢ ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á**\n\n{broadcast_message}"
                )
                sent_count += 1
                await asyncio.sleep(0.1)  # Rate limiting
            except Exception as e:
                failed_count += 1
                logger.error(f"Failed to send broadcast to {user['user_id']}: {e}")
        
        # Update status
        await callback_query.edit_message_text(
            f"üì¢ ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö**\n\n"
            f"**·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** {len(users)}\n"
            f"**s·¥á…¥·¥õ:** {sent_count}\n"
            f"**Íú∞·¥Ä…™ ü·¥á·¥Ö:** {failed_count}"
        )
        
    except Exception as e:
        logger.error(f"Error in broadcast confirm: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä …™…¥  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", show_alert=True)

@Client.on_callback_query(filters.regex("^broadcast_cancel$"))
async def broadcast_cancel_callback(client: Client, callback_query: CallbackQuery):
    """Handle broadcast cancellation"""
    if callback_query.from_user.id not in Config.ADMINS:
        await callback_query.answer("‚ùå ·¥ú…¥·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö", show_alert=True)
        return
    
    await callback_query.edit_message_text("‚ùå ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö**")