from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database
from info import Config
import logging
import asyncio
import random
import string
from datetime import datetime, timedelta
import json

logger = logging.getLogger(__name__)
db = Database()

def admin_only(func):
    """Decorator to restrict commands to admins only"""
    async def wrapper(client: Client, message: Message):
        user_id = message.from_user.id
        if user_id not in Config.ADMINS:
            await message.reply_text("‚ùå  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
            return
        return await func(client, message)
    return wrapper

@Client.on_message(filters.command("broadcast") & filters.private)
@admin_only
async def broadcast_command(client: Client, message: Message):
    """Handle /broadcast command"""
    try:
        # Ensure database is connected
        if not db._connected:
            await db.connect()
        if len(message.command) < 2:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/broadcast <message>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/broadcast Hello everyone!`"
            )
            return
        
        broadcast_message = message.text.split(None, 1)[1]
        
        # Get confirmation
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ ·¥Ñ·¥è…¥Íú∞…™ Ä·¥ç", callback_data=f"broadcast_confirm_{message.id}")],
            [InlineKeyboardButton("‚ùå ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü", callback_data="broadcast_cancel")]
        ])
        
        await message.reply_text(
            f"üì¢ ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è…¥Íú∞…™ Ä·¥ç·¥Ä·¥õ…™·¥è…¥**\n\n"
            f"**·¥ç·¥áss·¥Ä…¢·¥á:**\n{broadcast_message}\n\n"
            f"·¥Ñ·¥è…¥Íú∞…™ Ä·¥ç ·¥õ·¥è s·¥á…¥·¥Ö ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs.",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in broadcast command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä …™…¥  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")

@Client.on_callback_query(filters.regex(r"^broadcast_confirm_(\d+)$"))
async def broadcast_confirm(client: Client, callback_query):
    """Handle broadcast confirmation"""
    try:
        if callback_query.from_user.id not in Config.ADMINS:
            await callback_query.answer("‚ùå ·¥ú…¥·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö", show_alert=True)
            return
        
        message_id = int(callback_query.matches[0].group(1))
        
        # Get original message
        original_message = await client.get_messages(callback_query.message.chat.id, message_id)
        broadcast_message = original_message.text.split(None, 1)[1]
        
        # Start broadcast
        await callback_query.edit_message_text(
            "üì¢ ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö**\n\n"
            "s·¥á…¥·¥Ö…™…¥…¢ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs..."
        )
        
        # Get all users
        users = await db.users.find({}).to_list(None)
        
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                await client.send_message(
                    user["user_id"],
                    f"üì¢ ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á**\n\n{broadcast_message}"
                )
                sent_count += 1
                await asyncio.sleep(0.1)  # Rate limiting
            except Exception as e:
                failed_count += 1
                logger.error(f"Failed to send broadcast to {user['user_id']}: {e}")
        
        # Update status
        await callback_query.edit_message_text(
            f"üì¢ ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö**\n\n"
            f"**·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** {len(users)}\n"
            f"**s·¥á…¥·¥õ:** {sent_count}\n"
            f"**Íú∞·¥Ä…™ ü·¥á·¥Ö:** {failed_count}"
        )
        
    except Exception as e:
        logger.error(f"Error in broadcast confirm: {e}")
        await callback_query.answer("‚ùå ·¥á Ä Ä·¥è Ä …™…¥  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", show_alert=True)

@Client.on_callback_query(filters.regex("^broadcast_cancel$"))
async def broadcast_cancel(client: Client, callback_query):
    """Handle broadcast cancellation"""
    if callback_query.from_user.id not in Config.ADMINS:
        await callback_query.answer("‚ùå ·¥ú…¥·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö", show_alert=True)
        return
    
    await callback_query.edit_message_text("‚ùå ** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö**")

@Client.on_message(filters.command("ban") & filters.private)
@admin_only
async def ban_command(client: Client, message: Message):
    """Handle /ban command"""
    try:
        # Ensure database is connected
        if not db._connected:
            await db.connect()
        if len(message.command) < 2:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/ban <user_id>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/ban 123456789`"
            )
            return
        
        try:
            user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö")
            return
        
        # Check if user exists
        user = await db.get_user(user_id)
        if not user:
            await message.reply_text("‚ùå ·¥ús·¥á Ä …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö")
            return
        
        # Ban user
        await db.ban_user(user_id)
        
        await message.reply_text(
            f"üö´ **·¥ús·¥á Ä  ô·¥Ä…¥…¥·¥á·¥Ö**\n\n"
            f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
            f"**…¥·¥Ä·¥ç·¥á:** {user.get('first_name', 'Unknown')}"
        )
        
        # Log ban
        if Config.LOG_CHANNEL_ID:
            try:
                log_text = f"üö´ **·¥ús·¥á Ä  ô·¥Ä…¥…¥·¥á·¥Ö**\n\n"
                log_text += f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
                log_text += f"**…¥·¥Ä·¥ç·¥á:** {user.get('first_name', 'Unknown')}\n"
                log_text += f"** ô·¥Ä…¥…¥·¥á·¥Ö  ô è:** {message.from_user.id}"
                
                await client.send_message(Config.LOG_CHANNEL_ID, log_text)
            except Exception as e:
                logger.error(f"Failed to log ban: {e}")
        
    except Exception as e:
        logger.error(f"Error in ban command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä  ô·¥Ä…¥…¥…™…¥…¢ ·¥ús·¥á Ä.")

@Client.on_message(filters.command("unban") & filters.private)
@admin_only
async def unban_command(client: Client, message: Message):
    """Handle /unban command"""
    try:
        if len(message.command) < 2:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/unban <user_id>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/unban 123456789`"
            )
            return
        
        try:
            user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö")
            return
        
        # Check if user exists
        user = await db.get_user(user_id)
        if not user:
            await message.reply_text("‚ùå ·¥ús·¥á Ä …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö")
            return
        
        # Unban user
        await db.unban_user(user_id)
        
        await message.reply_text(
            f"‚úÖ **·¥ús·¥á Ä ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö**\n\n"
            f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
            f"**…¥·¥Ä·¥ç·¥á:** {user.get('first_name', 'Unknown')}"
        )
        
        # Log unban
        if Config.LOG_CHANNEL_ID:
            try:
                log_text = f"‚úÖ **·¥ús·¥á Ä ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö**\n\n"
                log_text += f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
                log_text += f"**…¥·¥Ä·¥ç·¥á:** {user.get('first_name', 'Unknown')}\n"
                log_text += f"**·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö  ô è:** {message.from_user.id}"
                
                await client.send_message(Config.LOG_CHANNEL_ID, log_text)
            except Exception as e:
                logger.error(f"Failed to log unban: {e}")
        
    except Exception as e:
        logger.error(f"Error in unban command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä ·¥ú…¥ ô·¥Ä…¥…¥…™…¥…¢ ·¥ús·¥á Ä.")

@Client.on_message(filters.command("addpremium") & filters.private)
@admin_only
async def addpremium_command(client: Client, message: Message):
    """Handle /addpremium command"""
    try:
        # Ensure database is connected
        if not db._connected:
            await db.connect()
        if len(message.command) < 3:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/addpremium <user_id> <days>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/addpremium 123456789 30`"
            )
            return
        
        try:
            user_id = int(message.command[1])
            days = int(message.command[2])
        except ValueError:
            await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö ·¥è Ä ·¥Ö·¥Ä ès")
            return
        
        # Check if user exists
        user = await db.get_user(user_id)
        if not user:
            await message.reply_text("‚ùå ·¥ús·¥á Ä …¥·¥è·¥õ Íú∞·¥è·¥ú…¥·¥Ö")
            return
        
        # Add premium time
        success = await db.add_premium_time(user_id, days)
        
        if success:
            await message.reply_text(
                f"üíé **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ö·¥Ö·¥á·¥Ö**\n\n"
                f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
                f"**…¥·¥Ä·¥ç·¥á:** {user.get('first_name', 'Unknown')}\n"
                f"**·¥Ö·¥Ä ès ·¥Ä·¥Ö·¥Ö·¥á·¥Ö:** {days}"
            )
            
            # Notify user
            try:
                await client.send_message(
                    user_id,
                    f"üéâ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö**\n\n"
                    f"·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s!  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö!\n\n"
                    f"**·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥:** {days} ·¥Ö·¥Ä ès\n"
                    f"**·¥áx·¥ò…™ Ä·¥ás:** {(datetime.now() + timedelta(days=days)).strftime('%d/%m/%Y')}\n\n"
                    f"·¥á…¥·¥ä·¥è è ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢!"
                )
            except Exception as e:
                logger.error(f"Failed to notify user: {e}")
            
            # Log premium addition
            if Config.LOG_CHANNEL_ID:
                try:
                    log_text = f"üíé **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ö·¥Ö·¥á·¥Ö**\n\n"
                    log_text += f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
                    log_text += f"**…¥·¥Ä·¥ç·¥á:** {user.get('first_name', 'Unknown')}\n"
                    log_text += f"**·¥Ö·¥Ä ès:** {days}\n"
                    log_text += f"**·¥Ä·¥Ö·¥Ö·¥á·¥Ö  ô è:** {message.from_user.id}"
                    
                    await client.send_message(Config.LOG_CHANNEL_ID, log_text)
                except Exception as e:
                    logger.error(f"Failed to log premium addition: {e}")
        else:
            await message.reply_text("‚ùå Íú∞·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç")
        
    except Exception as e:
        logger.error(f"Error in addpremium command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç.")

@Client.on_message(filters.command("createcode") & filters.private)
@admin_only
async def createcode_command(client: Client, message: Message):
    """Handle /createcode command"""
    try:
        if len(message.command) < 2:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/createcode <days>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/createcode 30`"
            )
            return
        
        try:
            days = int(message.command[1])
        except ValueError:
            await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ö·¥Ä ès")
            return
        
        # Generate random code
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
        
        # Ensure database is connected
        if not db._connected:
            await db.connect()
            
        # Create code in database
        await db.create_premium_code(code, days, message.from_user.id)
        
        await message.reply_text(
            f"üé´ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ñ·¥è·¥Ö·¥á ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö**\n\n"
            f"**·¥Ñ·¥è·¥Ö·¥á:** `{code}`\n"
            f"**·¥Ö·¥Ä ès:** {days}\n"
            f"**·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è:** {message.from_user.id}\n\n"
            f"·¥ús·¥á Äs ·¥Ñ·¥Ä…¥  Ä·¥á·¥Ö·¥á·¥á·¥ç ·¥õ ú…™s ·¥Ñ·¥è·¥Ö·¥á ·¥ús…™…¥…¢ `/redeem {code}`"
        )
        
        # Log code creation
        if Config.LOG_CHANNEL_ID:
            try:
                log_text = f"üé´ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ñ·¥è·¥Ö·¥á ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö**\n\n"
                log_text += f"**·¥Ñ·¥è·¥Ö·¥á:** `{code}`\n"
                log_text += f"**·¥Ö·¥Ä ès:** {days}\n"
                log_text += f"**·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è:** {message.from_user.id}"
                
                await client.send_message(Config.LOG_CHANNEL_ID, log_text)
            except Exception as e:
                logger.error(f"Failed to log code creation: {e}")
        
    except Exception as e:
        logger.error(f"Error in createcode command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä ·¥Ñ Ä·¥á·¥Ä·¥õ…™…¥…¢ ·¥Ñ·¥è·¥Ö·¥á.")

@Client.on_message(filters.command("status") & filters.private)
@admin_only
async def status_command(client: Client, message: Message):
    """Handle /status command"""
    try:
        # Ensure database is connected
        if not db._connected:
            await db.connect()
        # Get user stats
        stats = await db.get_user_stats()
        
        # Get operations count
        operations_count = await db.operations.count_documents({})
        
        # Get premium codes count
        unused_codes = await db.premium_codes.count_documents({"used": False})
        used_codes = await db.premium_codes.count_documents({"used": True})
        
        status_text = f"""
üìä ** ô·¥è·¥õ s·¥õ·¥Ä·¥õ·¥ús**

**·¥ús·¥á Ä s·¥õ·¥Ä·¥õs:**
‚Ä¢ **·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** {stats['total_users']}
‚Ä¢ **·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ús·¥á Äs:** {stats['active_users']}
‚Ä¢ **·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs:** {stats['premium_users']}

**·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s:**
‚Ä¢ **·¥õ·¥è·¥õ·¥Ä ü ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s:** {operations_count}

**·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ñ·¥è·¥Ö·¥ás:**
‚Ä¢ **·¥ú…¥·¥ús·¥á·¥Ö ·¥Ñ·¥è·¥Ö·¥ás:** {unused_codes}
‚Ä¢ **·¥ús·¥á·¥Ö ·¥Ñ·¥è·¥Ö·¥ás:** {used_codes}

**s ès·¥õ·¥á·¥ç …™…¥Íú∞·¥è:**
‚Ä¢ **·¥Ö·¥áÍú∞·¥Ä·¥ú ü·¥õ ·¥Ñ Ä·¥á·¥Ö…™·¥õs:** {Config.DEFAULT_CREDITS}
‚Ä¢ **·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ñ·¥ès·¥õ:** {Config.PROCESS_COST}
‚Ä¢ **·¥Ö·¥Ä…™ ü è  ü…™·¥ç…™·¥õ:** {Config.DAILY_LIMIT}
‚Ä¢ ** Ä·¥áÍú∞·¥á Ä Ä·¥Ä ü  ô·¥è…¥·¥ús:** {Config.REFERRAL_BONUS}

**·¥ú·¥ò·¥õ…™·¥ç·¥á:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        await message.reply_text(status_text)
        
    except Exception as e:
        logger.error(f"Error in status command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä Íú∞·¥á·¥õ·¥Ñ ú…™…¥…¢ s·¥õ·¥Ä·¥õ·¥ús.")

@Client.on_message(filters.command("logs") & filters.private)
@admin_only
async def logs_command(client: Client, message: Message):
    """Handle /logs command"""
    try:
        # Ensure database is connected
        if not db._connected:
            await db.connect()
        # Get recent operations
        recent_ops = await db.operations.find({}).sort("date", -1).limit(10).to_list(None)
        
        if not recent_ops:
            await message.reply_text("üìã **…¥·¥è  Ä·¥á·¥Ñ·¥á…¥·¥õ ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s**")
            return
        
        logs_text = "üìã ** Ä·¥á·¥Ñ·¥á…¥·¥õ ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s**\n\n"
        
        for op in recent_ops:
            user_id = op.get("user_id")
            operation_type = op.get("operation_type")
            status = op.get("status")
            date = op.get("date")
            
            status_emoji = "‚úÖ" if status == "completed" else "‚ùå" if status == "failed" else "‚è≥"
            
            logs_text += f"{status_emoji} **{operation_type}**\n"
            logs_text += f"   ·¥ús·¥á Ä: `{user_id}`\n"
            logs_text += f"   ·¥Ö·¥Ä·¥õ·¥á: {date.strftime('%d/%m %H:%M')}\n\n"
        
        await message.reply_text(logs_text)
        
    except Exception as e:
        logger.error(f"Error in logs command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä Íú∞·¥á·¥õ·¥Ñ ú…™…¥…¢  ü·¥è…¢s.")

@Client.on_message(filters.command("dbbackup") & filters.private)
@admin_only
async def dbbackup_command(client: Client, message: Message):
    """Handle /dbbackup command"""
    try:
        # Get all collections data
        users = await db.users.find({}).to_list(None)
        operations = await db.operations.find({}).to_list(None)
        premium_codes = await db.premium_codes.find({}).to_list(None)
        referrals = await db.referrals.find({}).to_list(None)
        
        backup_data = {
            "users": users,
            "operations": operations,
            "premium_codes": premium_codes,
            "referrals": referrals,
            "backup_date": datetime.now().isoformat()
        }
        
        # Convert to JSON
        backup_json = json.dumps(backup_data, default=str, indent=2)
        
        # Save to file
        backup_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        backup_path = f"{Config.TEMP_DIR}/{backup_filename}"
        
        with open(backup_path, 'w') as f:
            f.write(backup_json)
        
        # Send file
        await client.send_document(
            message.chat.id,
            backup_path,
            caption=f"üì¶ **·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò**\n\n"
                   f"**·¥Ö·¥Ä·¥õ·¥á:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n"
                   f"**·¥ús·¥á Äs:** {len(users)}\n"
                   f"**·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s:** {len(operations)}\n"
                   f"**·¥Ñ·¥è·¥Ö·¥ás:** {len(premium_codes)}\n"
                   f"** Ä·¥áÍú∞·¥á Ä Ä·¥Ä üs:** {len(referrals)}"
        )
        
        # Clean up
        import os
        try:
            os.remove(backup_path)
        except:
            pass
        
    except Exception as e:
        logger.error(f"Error in dbbackup command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä ·¥Ñ Ä·¥á·¥Ä·¥õ…™…¥…¢  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò.")

@Client.on_message(filters.command("reset") & filters.private)
@admin_only
async def reset_command(client: Client, message: Message):
    """Handle /reset command"""
    try:
        if len(message.command) < 2:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/reset <user_id>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/reset 123456789`"
            )
            return
        
        try:
            user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö")
            return
        
        # Reset user's daily usage
        await db.reset_daily_usage(user_id)
        
        await message.reply_text(
            f"üîÑ **·¥ús·¥á Ä  Ä·¥ás·¥á·¥õ**\n\n"
            f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
            f"·¥Ö·¥Ä…™ ü è ·¥ús·¥Ä…¢·¥á  ú·¥Äs  ô·¥á·¥á…¥  Ä·¥ás·¥á·¥õ."
        )
        
    except Exception as e:
        logger.error(f"Error in reset command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä  Ä·¥ás·¥á·¥õ·¥õ…™…¥…¢ ·¥ús·¥á Ä.")

@Client.on_message(filters.command("addsudo") & filters.private)
async def addsudo_command(client: Client, message: Message):
    """Handle /addsudo command (owner only)"""
    try:
        if message.from_user.id != Config.OWNER_ID:
            await message.reply_text("‚ùå ·¥è…¥ ü è ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
            return
        
        if len(message.command) < 2:
            await message.reply_text(
                "‚ùå **…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á**\n\n"
                "**·¥ús·¥Ä…¢·¥á:** `/addsudo <user_id>`\n"
                "**·¥áx·¥Ä·¥ç·¥ò ü·¥á:** `/addsudo 123456789`"
            )
            return
        
        try:
            user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö")
            return
        
        if user_id in Config.ADMINS:
            await message.reply_text("‚ùå ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.")
            return
        
        # Add to admins list (runtime only)
        Config.ADMINS.append(user_id)
        
        await message.reply_text(
            f"üëë **·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö**\n\n"
            f"**·¥ús·¥á Ä …™·¥Ö:** `{user_id}`\n"
            f"·¥õ ú·¥á è …¥·¥è·¥°  ú·¥Ä·¥†·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä·¥Ñ·¥Ñ·¥áss."
        )
        
        # Notify new admin
        try:
            await client.send_message(
                user_id,
                "üéâ **·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä·¥Ñ·¥Ñ·¥áss …¢ Ä·¥Ä…¥·¥õ·¥á·¥Ö**\n\n"
                " è·¥è·¥ú …¥·¥è·¥°  ú·¥Ä·¥†·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ·¥è ·¥õ ú…™s  ô·¥è·¥õ!"
            )
        except Exception as e:
            logger.error(f"Failed to notify new admin: {e}")
        
    except Exception as e:
        logger.error(f"Error in addsudo command: {e}")
        await message.reply_text("‚ùå ·¥á Ä Ä·¥è Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥Ä·¥Ö·¥ç…™…¥.")
